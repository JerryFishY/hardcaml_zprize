(* TODO(fquah): Share code below with test_adder_pipe. *)

open! Core
open! Hardcaml
open! Snarks_r_fun

module Subtracter377 = Subtracter_pipe.With_interface(struct
    let bits = 377
  end)
module Sim = Cyclesim.With_interface(Subtracter377.I)(Subtracter377.O)

let create_sim ~stages =
  let scope = Scope.create ~flatten_design:true () in
  Sim.create (Subtracter377.create ~stages scope)
;;

let (<--.) dst src = dst := Bits.of_int ~width:(Bits.width !dst) src

type test_cases =
  { x : Z.t
  ; y : Z.t
  ; p : Z.t
  }

let sexp_of_z z = Sexp.Atom (Z.to_string z)

let%expect_test "" =
  let test_cases =
    let p = Ark_bls12_377_g1.modulus () in
    List.concat [
      [ { x = Z.of_string "1"
        ; y = Z.of_string "1"
        ; p
        }
      ; { x = Z.of_string "0"
        ; y = Z.of_string "1"
        ; p
        }
      ; { x = Z.of_string "0xe0e256ba5aa3f3e40c3639e906da2f99eab99d553da9f7400d68ce6405912813bae37f66044adfb1290b1cb3e03cdb"
        ; y = Z.of_string "0x17c530d26d8fcfafb97738e03852f7cb69097c78231eee81276be2cbfc23889b98c24708cc1b8fd3e32988126b3143f"
        ; p
        }
      ]
    ; List.init 50 ~f:(fun _ ->
          let p = Ark_bls12_377_g1.modulus () in
          let random_bigint () =
            Utils.random_z ~lo_incl:Z.zero ~hi_incl:Z.(p - one)
          in
          { x = random_bigint ()
          ; y = random_bigint ()
          ; p
          })
    ]
  in
  let stages = 3 in
  let sim = create_sim ~stages in
  let inputs = Cyclesim.inputs sim in
  let outputs = Cyclesim.outputs sim in
  let results = Queue.create () in
  let cycle () =
    Cyclesim.cycle sim;
    if Bits.is_vdd !(outputs.valid) then (
      Queue.enqueue results (Bits.to_z ~signedness:Unsigned !(outputs.z))
    );
  in
  inputs.enable <--. 1;
  List.iter test_cases ~f:(fun { x; y; p } ->
      inputs.p := Bits.of_z ~width:Subtracter377.bits p;
      inputs.x := Bits.of_z ~width:Subtracter377.bits x;
      inputs.y := Bits.of_z ~width:Subtracter377.bits y;
      inputs.valid <--. 1;
      cycle ();
    );
  inputs.valid <--. 0;
  for _ = 1 to Subtracter_pipe.latency ~stages do
    cycle ();
  done;
  cycle ();
  List.map2_exn test_cases (Queue.to_list results) ~f:(fun { x; y; p } obtained ->
      let expected = Z.((x - y + p) mod p) in
      if Z.equal obtained expected
      then Ok ()
      else Or_error.error_s [%message
           "Test case failed!"
             (x : z)
             (y : z)
             (obtained : z)
             (expected : z)
        ])
  |> Or_error.combine_errors_unit
  |> [%sexp_of: unit Or_error.t]
  |> Stdio.print_s;
  [%expect {|
    (Error
     (("Test case failed!"
       (x
        135206392131982047824738976471007376377371852332270250291883719641007346108223216429986196105374685095850198187227)
       (y
        228661272140676446205852459815315312040843832885906090723859031426323710758616805375673500756094774645395933041727)
       (obtained
        165209546004274695629539250350585597872921532201278820107908950881404103698032304421011818104719114226752528656541)
       (expected
        165209546004274695629539250350585597872921532201278820107908950881404103697947233829281583488853270574894586603677))
      ("Test case failed!" (x 0)
       (y
        1622254730711620665999222512632845001231675146389763421488442105489565249324783010415952089702145174590206524975)
       (obtained
        257042171282257473344653511182260688542398843185857159332369007124273897339845413806155471302337313950344685535698)
       (expected
        257042171282257473344653511182260688535161837608524897118395820561230903099016039764552936049871214949850114933202))
      ("Test case failed!" (x 0)
       (y
        53489162627961425385582185233710623530090391408971748648492723267564531498324346086920877808077634144004069415787)
       (obtained
        205175263385007668625070548461182910006303121345942911891391539399155936850101547279778244947361569632294194095254)
       (expected
        205175263385007668625070548461182910006303121345942911891391539399155936850016476688048010331495725980436252042390))
      ("Test case failed!"
       (x
        18872505346472116091725038433073625052108364308407758956884251535626415250828553503213901303913779292021072340346)
       (y
        242499880269919187529739614891531897626280028577582307337347358640396230746924240026433902510243813468562663615520)
       (obtained
        35037051089522022572638157236435260962221848485740112159421155561950652852330206843479121549109169599756672235867)
       (expected
        35037051089522022572638157236435260962221848485740112159421155561950652852245136251748886933243325947898730183003))
      ("Test case failed!"
       (x
        120226544233204028310353432343052657989166542727239875895161926044834040160545092078350453855660241466420398286106)
       (y
        240124283595555456839786970343415678791960263716583350353037839805949155753482717043534023792471639775082134112816)
       (obtained
        138766686650617665481219195694530512733599791765571186082008348905605352755488268401515552818627805467636527684331)
       (expected
        138766686650617665481219195694530512733599791765571186082008348905605352755403197809785318202761961815778585631467))
      ("Test case failed!" (x 0)
       (y
        140307349008306683124278365808490663626870488615647590493217483085204597981251292527346676139912354487512669471746)
       (obtained
        118357077004662410886374367886402869909523024139267070046666779581515870367174600839352446615526849288785594039295)
       (expected
        118357077004662410886374367886402869909523024139267070046666779581515870367089530247622211999661005636927651986431))
      ("Test case failed!"
       (x
        57076066979580913423679491667316252016185774479577981258715526816410724396070429659124023519338128445951968923006)
       (y
        163211148543382885068200332621535922363744121671958775903098815407308205144842043570191807224200928703105422067266)
       (obtained
        152529344449167122366131892740673863188835165562533865895500974075822987599654279455631339050576403519144810366781)
       (expected
        152529344449167122366131892740673863188835165562533865895500974075822987599569208863901104434710559867286868313917))
      ("Test case failed!"
       (x
        91086244199440522410857138612968221025618721990468977498438503555621306547605862323076100353632964505025527595886)
       (y
        155221792494533499517107795458270998413716984140148618661263516175744810388351441308528691846407194625103341219450)
       (obtained
        194528877717876116904402076849590756155532256182567281591032436609639958748509688422849066515131072656715020489973)
       (expected
        194528877717876116904402076849590756148295250605235019377059250046596964507595243789516296646799130004362507834613)))) |}]
;;
